# R Basics

Below you will find a collection of R basic concepts.

### Objects {.unnumbered}

An **object** is a data structure that stores a value or a set of values, along with information about the type of data and any associated attributes. Objects are usually created by assigning a value to a variable name. You can assign values by using either `=` or `<-`.\
When naming objects in R use *PascalCase*, *camelCase*, *snake_case* or *dot.case*.

```{r}
ScreenTime<-120
```

### Vectors {.unnumbered}

A **vector** is a one-dimensional array that can hold elements of any data type.\
Some common data types are numeric, character, logical, and complex.\
Use the `c()` function to concatenate (combine) elements and store them in a vector.

```{r}
ScreenTimeDays<-c(110,115,120,98,60)
```

### Data Frames {.unnumbered}
A **data frame** in R is a two-dimensional structure used for storing data in a tabular format. It is one of the most common data structures in R, similar to a spreadsheet. Columns, represent variables and rows represent observations or records. You can use the `data.frame()` function to create a data frame:

```{r}
(data<-data.frame(x=c(1,2,3),y=c(10,9,8)))
```

### Tibbles {.unnumbered}
A **tibble** is an enhanced version of a data frame in R, introduced by the `tibble` package, which is part of the `tidyverse` collection of packages. It provides a modern approach to working with tabular data, improving usability, readability, and consistency. Below we create a tibble to store data:

```{r message=FALSE}
library(tidyverse)
tibble(w=c(1,3,5,8),z=c(1,2,3,5))
```

### Importing data {.unnumbered}

To **import** data into R you can use the `read_csv()` function. This command from the `tidyverse` package imports data as a tsibble. Below we import data on dog intelligence and preview it with the `glimpse()` function.

```{r}
di<-read_csv("https://jagelves.github.io/Data/dog_intelligence.csv")
glimpse(di)
```

### Functions {.unnumbered}

In general, **functions** relate an input (arguments) to an output. For example, the `sum()` function takes as an input a vector with numeric values and returns the sum of the elements.

```{r}
SleepingHours<-c(10,9,6,8)
sum(SleepingHours)
```

To learn more about a function you can use `?`. For example, to learn more about the `sum()` function, write `?sum` in the console.

### Data Types {.unnumbered}

The main data types are numeric, character, logical, date, and complex. 
- The numeric type includes all numbers, whether integers or real numbers with decimal points. It is the default type for numbers in R. If a number has no explicit decimal, R still treats it as numeric unless explicitly declared as an integer.
- The character type is used to represent text or string data. Strings are enclosed in either single (') or double (") quotes.
- The logical type is used for boolean values: TRUE or FALSE. It is commonly used in comparisons and conditional statements.
- The date type represents calendar dates and is stored as the number of days since January 1, 1970 (known as the Unix epoch). 
- The complex type allows numbers that have a real and imaginary component, commonly used in advanced mathematics.

To identify the data type stored in a vector use the `class()` function.

```{r}
class(SleepingHours)
```

### Comparison Operators {.unnumbered}
In R, comparison operators are used to compare two values or objects. They return a logical value (TRUE or FALSE) based on whether the comparison is true or false.

Here are the primary comparison operators in R:
```{r echo=FALSE, out.width="75%", fig.align='center'}
knitr::include_graphics("images/op.png")
```

