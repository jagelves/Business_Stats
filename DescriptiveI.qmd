```{=html}
<style>
details {
  background-color: #F8F9FA;
  padding: 5px;
  border: 1px solid #ddd; /* Light border */
  border-radius: 5px; /* Rounded corners */
  margin: 10px 0; /* Spacing */
}

details summary {
  cursor: pointer; /* Pointer cursor for interactivity */
}
</style>
```

# Descriptive Stats I

Understanding the nature and classification of data is crucial for effective analysis and decision-making. Data are the building blocks of insights, providing a foundation for businesses, researchers, and policymakers to make informed choices. How we collect and categorize data significantly impacts how it is analyzed and interpreted. Below we highlight key types of data and their unique characteristics to help you get started with data analysis.

## Data and Types of Data

**Data** are facts and figures collected, analyzed and summarized for presentation and interpretation. Data can be classified as:

-   **Cross Sectional Data** refers to data collected at the same (or approximately the same) point in time. *Ex: NFL standings in 1980 or Country GDP in 2015.*

-   **Time Series Data** refers to data collected over several time periods. *Ex: U.S. inflation rate from 2000-2010 or Tesla deliveries from 2016-2022.*

-   **Structured Data** resides in a predefined row-column format (tidy). *Ex: spreadsheet data.*

-   **Unstructured Data** do not conform to a pre-defined row-column format. *Ex: Text, video, and other multimedia.*

**Example:** Consider a retail store analyzing its sales performance. If the store collects data on the total revenue generated *by each location* on Black Friday, it is cross-sectional data. On the other hand, if the store tracks *weekly sales for the past year* to observe trends, it is time series data. Structured data, like sales figures stored in *spreadsheets*, allows for easy comparison and analysis. Meanwhile, customer feedback gathered from *social media posts and video reviews* represents unstructured data, requiring advanced tools to extract meaningful insights.

## Data Sets

A **data set** contains all data collected for a particular study. Data sets are composed of:

-   **Elements** are the entities on which data are collected. *Ex: Football teams, countries, and individuals.*

-   **Variables** are a set of characteristics collected for each element. *Ex: Goals scored, GDP, weight.*

-   **Observations** are the set of measurements obtained for a particular element. *Ex: Salah, 20 (goals), 15 (assists). US, 2.3 (inflation), 4.5% (federal interest rate).*

| Elements  | Variable 1 | Variable 2 |
|:---------:|:----------:|:----------:|
| Element 1 |     \#     |     \#     |
| Element 2 |     \#     |     \#     |
| Element 3 |     \#     |     \#     |
|    ...    |    ...     |    ...     |

**Example:** Consider the dataset on electric vehicles (EV's) displayed below:

```{r echo=FALSE, out.width="75%", fig.align='center'}
knitr::include_graphics("images/EVs.png")
```

In this dataset, each row represents an electric vehicle model, making the elements the specific EV models rather than the manufacturers. The variables collected for each model include:

-   Make: The manufacturer of the EV.
-   Model: The specific name of the EV model.
-   Range_km: Driving range in kilometers on a full charge.
-   TopSpeed_kmh: Maximum speed in km/h.
-   Price_pounds: Price in pounds (£).
-   Charge_kmh: Charging speed in kilometers per hour.

An example observation is "Tesla Model 3," with the following data: Make: Tesla, Model: Model 3, Range_km: 415, TopSpeed_kmh: 201, Price_pounds: 39,990, Charge_kmh: 690.

## Scales of Measurement

Understanding scales of measurement is crucial for analyzing and interpreting data effectively in business. By distinguishing between categorical (e.g., marital status, satisfaction ratings) and numerical data (e.g., profits, prices), you’ll know what methods to use for analysis. Knowing whether data is nominal, ordinal, interval, or ratio ensures your analysis and conclusions are accurate and relevant.

The **scales of measurements** determine the amount and type of information contained in each variable. In general, variables can be classified as **categorical** or **numerical**.

-   **Categorical** (qualitative) data includes labels or names to identify an attribute of each element. Categorical data can be **nominal** or **ordinal**.

    -   With **nominal** data, the order of the categories is arbitrary. *Ex: Marital Status, Race/Ethnicity, or NFL division.*

    -   With **ordinal** data, the order or rank of the categories is meaningful. *Ex: Rating, Difficulty Level, or Spice Level.*

-   **Numerical** (quantitative) include numerical values that indicate how many (discrete) or how much (continuous). The data can be either **interval** or **ratio**.

    -   With **interval** data, the distance between values is expressed in terms of a fixed unit of measure. The zero value is arbitrary and does not represent the absence of the characteristic. Ratios are not meaningful. *Ex: Temperature or Dates.*

    -   With **ratio** data, the ratio between values is meaningful. The zero value is not arbitrary and represents the absence of the characteristic. *Ex: Prices, Profits, Wins.*

**Example:** Let's keep using the EV example. Consider the new data set below:

```{r echo=FALSE, out.width="75%", fig.align='center'}
knitr::include_graphics("images/EVs2.png")
```

The variables can be classified as follows: Car (Categorical - Nominal), consists of names of cars, which are labels used to identify each row. The order of these names does not matter, making it nominal data. Brand (Categorical - Nominal) represents the manufacturer of the car (e.g., Ford, Audi). These are labels with no inherent order, making it nominal data. Range (Numerical - Ratio), refers to the car's driving range in miles. It is numerical and ratio because it has a meaningful zero (a car with zero range cannot move), and ratios are meaningful (e.g., a car with 250 miles range has double the range of one with 125 miles). Rating (Categorical - Ordinal) represents a rank or score (e.g., 4, 3, 2). The order matters, as higher ratings indicate better performance. However, the intervals between ratings are not consistent, so it is ordinal data. Year (Numerical - Interval) represents a point in time. While numerical, it is interval data because the zero point is arbitrary (e.g., year 0 does not indicate the "absence" of time), and ratios are not meaningful (e.g., 2020 is not "twice as late" as 1010).

## Useful Base R Functions

Understanding and using Base R functions is essential for efficiently managing and analyzing data. Functions like `na.omit()` help clean datasets by removing rows with missing values, ensuring your analyses are accurate and complete. `nrow()` and `ncol()` quickly provide insights into the size of your dataset, while `is.na()` allows you to identify and address missing data. The `summary()` function is a powerful way to generate descriptive statistics and assess the overall structure of your data at a glance. Additionally, coercion functions like `as.integer()`, `as.factor()`, and `as.double()` enable you to convert variables to appropriate data types, ensuring compatibility with different analysis methods.

-   The `na.omit()` function removes any observations that have a missing value (NA). The resulting data frame has only complete cases. *Input: A data frame (tibble) or vector.*
-   The `nrow()` and `ncol()` functions return the number of rows and columns respectively from a data frame. *Input: A data frame (tibble).*
-   The `is.na()` function returns a vector of *True* and *False* that specify if an entry is missing (NA) or not. *Input: A data frame (tibble) or vector.*
-   The `summary()` function returns a collection of descriptive statistics from a data frame (or vector). The function also returns whether there are any missing values (NA) in a variable. *Input: A data frame (tibble) or vector.*
-   The `as.integer()`, `as.factor()`, `as.double()`, are functions used to coerce your data into a different scale of measurement. *Input: A vector or column of a data frame (tibble).*

## Useful dplyr Functions

The `dplyr` package has a collection of functions that are useful for data manipulation and transformation. If you are interested in this package you can refer to @R4DS. To install, run the following command in the console `install.packages("dplyr")`.

-   The `arrange()` function allows you to sort data frames in ascending order. Pair with the `desc()` function to sort the data in descending order.
-   The `filter()` function allows you to subset the rows of your data based on a condition.
-   The `select()` function allows you to select a subset of variables from your data frame.
-   The `mutate()` function allows you to create a new variable.
-   The `group_by()` function allows you to group your data frame by categories present in a given variable.
-   The `summarise()` function allows you to summarise your data, based on groupings generated by the `goup_by()` function.

## Exercises

The following exercises will help you test your knowledge on the Scales of Measurement. They will also allow you to practice some basic data "wrangling" in R. In these exercises you will:

-   Identify numerical and categorical data.

-   Classify data according to their scale of measurement.

-   Sort and filter data in R.

-   Handle missing values (NA's) in R.

Answers are provided below. Try not to peak until you have a formulated your own answer and double checked your work for any mistakes.

### Exercise 1 {.unnumbered}

A bookstore has compiled data set on their current inventory. A portion of the data is shown below:

|     Title     | Price | Year Published | Rating |
|:-------------:|:-----:|:--------------:|:------:|
| Frankenstein  | 5.49  |      1818      |  4.2   |
|    Dracula    | 7.60  |      1897      |  4.0   |
|      ...      |  ...  |      ...       |  ...   |
| Sleepy Hollow | 6.95  |      1820      |  3.8   |

1.  Which of the above variables are categorical and which are numerical?

<details>

<summary>Answer</summary>

-  *The "Title" variable represents the names of books. Therefore, this is a categorical variable.*

-  *"Price" represents the cost of each book in a numeric format, making it a numerical variable.* 
-  *"Year Published" indicates the publication year of each book. It is numerical.*

-  *If "Rating" represents a numerical score based on a continuous scale (e.g., average user ratings on a platform like Goodreads), it is numerical because arithmetic operations like averaging or comparing differences are meaningful.*
*If "Rating" represents predefined categories (e.g., "Excellent," "Good," "Fair," "Poor") or is interpreted as ranks without meaningful differences between values, it would be categorical.*

</details>

2.  What is the measurement scale of each of the above variable?

<details>

<summary>Answer</summary>

-  *The measurement scale is nominal for "Title" since these are labels used to identify each book and do not have a numerical meaning or order.* 

-  *If "Rating" represents a score (e.g., 4.2, 4.0) given to each book, it is numerical and could be considered interval data because the scale represents a meaningful difference, but it may not have an absolute zero or meaningful ratios (e.g., a book rated 4.0 is not "twice as good" as one rated 2.0).*

-  *"Price" is a measurable quantity with a meaningful zero (e.g., a book priced at \$0 means it is free), making it ratio data.*

-  *"Year" is interval data because the zero point is arbitrary (year 0 does not represent the absence of time) and differences between years are meaningful (e.g., 1897 - 1818 = 79 years).*

</details>

### Exercise 2 {.unnumbered}

A car company tracks the number of deliveries every quarter. A portion of the data is shown below:

| Year | Quarter | Deliveries |
|:----:|:-------:|:----------:|
| 2016 |    1    |   14800    |
| 2016 |    2    |   14400    |
| ...  |   ...   |    ...     |
| 2022 |    3    |   343840   |

1.  What is the measurement scale of the Year variable? What are the strengths and weaknesses of this type of measurement scale?

<details>

<summary>Answer</summary>

*The variable Year is measured on the interval scale because the observations can be ranked, categorized and measured when using this kind of scale. However, there is no true zero point so we cannot calculate meaningful ratios between years.*

</details>

2.  What is the measurement scale for the Quarter variable? What is the weakness of this type of measurement scale?

<details>

<summary>Answer</summary>

*The variable Quarter is measured on the ordinal scale, even though it contains numbers. It is the least sophisticated level of measurement because if we are presented with nominal data, all we can do is categorize or group the data.*

</details>

3.  What is the measurement scale for the Deliveries variable? What are the strengths of this type of measurement scale?

<details>

<summary>Answer</summary>

*The variable Deliveries is measured on the ratio scale. It is the strongest level of measurement because it allows us to categorize and rank the data as well as find meaningful differences between observations. Also, with a true zero point, we can interpret the ratios between observations.*

</details>

### Exercise 3 {.unnumbered}

Use the **airquality** data set included in R for this problem.

1.  Sort the data by *Temp* in descending order. What is the day and month of the first observation on the sorted data?

<details>

<summary>Answer</summary>

*The day and month of the first observation is August 28th.*

*The easiest way to sort in R is by using the `dplyr` package. Specifically, the `arrange()` function within the package. Let's also use the `desc()` function to make sure that the data is sorted in descending order. We can use indexing to retrieve the first row of the sorted data set.*

```{r message=FALSE}
library(dplyr)
SortedAQ<-arrange(airquality,desc(Temp))
SortedAQ[1,]
```

</details>

2.  Sort the data only by *Temp* in descending order. Of the $10$ hottest days, how many of them were in July?

<details>

<summary>Answer</summary>

*We can use the `arrange()` function one more time for this question. Then we can use indexing to retrieve the top* $10$ observations.

```{r}
SortedAQ2<-arrange(airquality,desc(Temp))
SortedAQ2[1:10,]
```

</details>

3.  How many missing values are there in the data set? What rows have missing values for *Solar.R*?

<details>

<summary>Answer</summary>

*There are a total of* $44$ missing values. Ozone has $37$ and Solar.R has $7$. Rows $5$, $6$, $11$, $27$, $96$, $97$, $98$ are missing for Solar.R.

*We can easily identify missing values with the `summary()` function.*

```{r}
summary(airquality)
```

*To view the rows that have NA's in them, we can use the `is.na()` function and indexing. Below we see that* $7$ values are missing for the Solar.R variable in the months $5$ and $8$ combined.

```{r}
airquality[is.na(airquality$Solar.R),]
```

</details>

4.  Remove all observations that have a missing values. Create a new object called *CompleteAG*.

<details>

<summary>Answer</summary>

*To create the new object of complete observations we can use the `na.omit()` function.*

```{r}
CompleteAQ<-na.omit(airquality)
```

</details>

5.  When using *CompleteAG*, how many days was the temperature at least $60$ degrees?

<details>

<summary>Answer</summary>

*There were* $107$ days where the temperature was at least $60$.

*Using base R we have:*

```{r}
nrow(CompleteAQ[CompleteAQ$Temp>=60,])
```

*We can also use `dplyr` for this question. Specifically, using the `filter()` and `nrow()` functions we get:*

```{r}
nrow(filter(CompleteAQ,Temp>=60))
```

</details>

6.  When using *CompleteAG*, how many days was the temperature within \[$55$,$75$\] degrees and an *Ozone* below $20$?

<details>

<summary>Answer</summary>

*There were* $24$ days where the temperature was between $55$ and $75$ and the ozone level was below $20$.

*Using base R we have:*

```{r}
nrow(CompleteAQ[CompleteAQ$Temp>55 & CompleteAQ$Temp<75 & CompleteAQ$Ozone<20,])
```

*Using the `filter()` function once more we get:*

```{r}
nrow(filter(CompleteAQ,Temp>55,Temp<75,Ozone<20))
```

</details>

### Exercise 4 {.unnumbered}

Use the **Packers** data set for this problem. You can find the data set at https://jagelves.github.io/Data/Packers.csv

1.  Remove the any observation that has a missing value with the `na.omit()` function. How many observations are left in the data set?

<details>

<summary>Answer</summary>

*There are* $84$ observations in the complete cases data set.

*Let's import the data to R by using the `read.csv()` function.*

```{r}
Packers<-read.csv("https://jagelves.github.io/Data/Packers.csv")
```

*We can remove any missing observation by using the `na.omit()` function. We can name this new object Packers2*.

```{r}
Packers2<-na.omit(Packers)
```

*To find the number of observations we can use the `dim()` function. It returns the number of observations and variables.*

```{r}
dim(Packers2)
```

</details>

2.  Determine the type of the *Experience* variable by using the `typeof()` function. What type is the variable?

<details>

<summary>Answer</summary>

*The type is character.*

*Use the `typeof()` function on the Experience variable.*

```{r}
typeof(Packers2$Experience)
```

</details>

3.  Remove observations that have an "R" and coerce the *Experience* variable to an integer using the `as.integer()` function. What is the total sum of years of experience?

<details>

<summary>Answer</summary>

*The total sum of experience is* $288$.

*First, remove any observation with an R by using indexing and logicals.*

```{r}
Packers2<-Packers2[Packers2$Experience!="R",]
```

*Now we can coerce the variable to an integer by using the `as.integer()` function.*

```{r}
Packers2$Experience<-as.integer(Packers2$Experience)
```

*Lastly, calculate the sum using the `sum()` function.*

```{r}
sum(Packers2$Experience)
```

</details>
